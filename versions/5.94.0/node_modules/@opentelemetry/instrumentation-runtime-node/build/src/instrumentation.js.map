{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../src/instrumentation.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;GAcG;AACH,qDAAoE;AACpE,MAAM,EAAE,oBAAoB,EAAE,GAAG,6BAAW,CAAC;AAE7C,oEAAqE;AAErE,uCAA0D;AAG1D,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,cAAc,GAAqC;IACvD,uCAAuC,EAAE,IAAI;CAC9C,CAAC;AAEF,MAAa,0BAA2B,SAAQ,qCAAmB;IAIjE,YAAY,SAA2C,EAAE;QACvD,KAAK,CACH,sBAAY,EACZ,yBAAe,EACf,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,CAC1C,CAAC;QARI,UAAK,GAA2B,EAAE,CAAC;IAS3C,CAAC;IAEO,OAAO;QACb,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAC3C,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,WAAW,EAAE;YACnC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAClB;IACH,CAAC;IAEO,SAAS;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACjB;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,2CAA2C;IAC3C,oGAAoG;IAC3F,wBAAwB;QAC/B,IAAI,CAAC,KAAK;aACP,qBAAqB,CAAC,+BAA+B,EAAE;YACtD,WAAW,EAAE,wBAAwB;YACrC,IAAI,EAAE,GAAG;SACV,CAAC;aACD,WAAW,CAAC,KAAK,EAAC,gBAAgB,EAAC,EAAE;YACpC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,WAAW,EAAE;gBACrC,OAAO;aACR;YACD,MAAM,GAAG,GAAG,oBAAoB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YAChD,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,IAAI;QACF,iDAAiD;IACnD,CAAC;IAEQ,MAAM;;QACb,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,WAAW,CAC1B,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,EACnB,IAAI,CAAC,OAA4C;aAC/C,uCAAuC,CAC3C,CAAC;QAEF,kFAAkF;QAClF,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,EAAE,CAAC;IAC1B,CAAC;IAEQ,OAAO;QACd,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;CACF;AAlED,gEAkEC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventLoopUtilization, performance } from 'node:perf_hooks';\nconst { eventLoopUtilization } = performance;\n\nimport { InstrumentationBase } from '@opentelemetry/instrumentation';\n\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { RuntimeNodeInstrumentationConfig } from './types';\n\nconst ELUS_LENGTH = 2;\nconst DEFAULT_CONFIG: RuntimeNodeInstrumentationConfig = {\n  eventLoopUtilizationMeasurementInterval: 5000,\n};\n\nexport class RuntimeNodeInstrumentation extends InstrumentationBase {\n  private _ELUs: EventLoopUtilization[] = [];\n  private _interval: NodeJS.Timeout | undefined;\n\n  constructor(config: RuntimeNodeInstrumentationConfig = {}) {\n    super(\n      PACKAGE_NAME,\n      PACKAGE_VERSION,\n      Object.assign({}, DEFAULT_CONFIG, config)\n    );\n  }\n\n  private _addELU() {\n    this._ELUs.unshift(eventLoopUtilization());\n    if (this._ELUs.length > ELUS_LENGTH) {\n      this._ELUs.pop();\n    }\n  }\n\n  private _clearELU() {\n    if (!this._ELUs) {\n      this._ELUs = [];\n    }\n    this._ELUs.length = 0;\n  }\n\n  // Called when a new `MeterProvider` is set\n  // the Meter (result of @opentelemetry/api's getMeter) is available as this.meter within this method\n  override _updateMetricInstruments() {\n    this.meter\n      .createObservableGauge('nodejs.event_loop.utilization', {\n        description: 'Event loop utilization',\n        unit: '1',\n      })\n      .addCallback(async observableResult => {\n        if (this._ELUs.length !== ELUS_LENGTH) {\n          return;\n        }\n        const elu = eventLoopUtilization(...this._ELUs);\n        observableResult.observe(elu.utilization);\n      });\n  }\n\n  init() {\n    // Not instrumenting or patching a Node.js module\n  }\n\n  override enable() {\n    this._clearELU();\n    this._addELU();\n    clearInterval(this._interval);\n    this._interval = setInterval(\n      () => this._addELU(),\n      (this._config as RuntimeNodeInstrumentationConfig)\n        .eventLoopUtilizationMeasurementInterval\n    );\n\n    // unref so that it does not keep the process running if disable() is never called\n    this._interval?.unref();\n  }\n\n  override disable() {\n    this._clearELU();\n    clearInterval(this._interval);\n    this._interval = undefined;\n  }\n}\n"]}