"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeNodeInstrumentation = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const node_perf_hooks_1 = require("node:perf_hooks");
const { eventLoopUtilization } = node_perf_hooks_1.performance;
const instrumentation_1 = require("@opentelemetry/instrumentation");
const version_1 = require("./version");
const ELUS_LENGTH = 2;
const DEFAULT_CONFIG = {
    eventLoopUtilizationMeasurementInterval: 5000,
};
class RuntimeNodeInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor(config = {}) {
        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, Object.assign({}, DEFAULT_CONFIG, config));
        this._ELUs = [];
    }
    _addELU() {
        this._ELUs.unshift(eventLoopUtilization());
        if (this._ELUs.length > ELUS_LENGTH) {
            this._ELUs.pop();
        }
    }
    _clearELU() {
        if (!this._ELUs) {
            this._ELUs = [];
        }
        this._ELUs.length = 0;
    }
    // Called when a new `MeterProvider` is set
    // the Meter (result of @opentelemetry/api's getMeter) is available as this.meter within this method
    _updateMetricInstruments() {
        this.meter
            .createObservableGauge('nodejs.event_loop.utilization', {
            description: 'Event loop utilization',
            unit: '1',
        })
            .addCallback(async (observableResult) => {
            if (this._ELUs.length !== ELUS_LENGTH) {
                return;
            }
            const elu = eventLoopUtilization(...this._ELUs);
            observableResult.observe(elu.utilization);
        });
    }
    init() {
        // Not instrumenting or patching a Node.js module
    }
    enable() {
        var _a;
        this._clearELU();
        this._addELU();
        clearInterval(this._interval);
        this._interval = setInterval(() => this._addELU(), this._config
            .eventLoopUtilizationMeasurementInterval);
        // unref so that it does not keep the process running if disable() is never called
        (_a = this._interval) === null || _a === void 0 ? void 0 : _a.unref();
    }
    disable() {
        this._clearELU();
        clearInterval(this._interval);
        this._interval = undefined;
    }
}
exports.RuntimeNodeInstrumentation = RuntimeNodeInstrumentation;
//# sourceMappingURL=instrumentation.js.map